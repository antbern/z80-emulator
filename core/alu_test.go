package core

import (
	"testing"
)

func TestConditions(t *testing.T) {
	tables := []struct {
		cond Condition
		F    uint8
		res  bool
	}{
		{NonZero, 0, true},
		{NonZero, FlagZ, false},
		{Zero, FlagZ, true},
		{Zero, 0, false},
		{NoCarry, 0, true},
		{NoCarry, FlagC, false},
		{Carry, FlagC, true},
		{Carry, 0, false},
		{ParityOdd, 0, true},
		{ParityOdd, FlagP, false},
		{ParityEven, FlagP, true},
		{ParityEven, 0, false},
		{SignPos, 0, true},
		{SignPos, FlagS, false},
		{SignNeg, FlagS, true},
		{SignNeg, 0, false},
	}

	for _, table := range tables {
		res := table.cond.isTrue(&table.F)
		if res != table.res {
			t.Errorf("Condition %v (%#04x) with Flag bits %#02x was incorrectly evaluated, got: %v, want: %v.", table.cond, table.cond, table.F, res, table.res)
		}
	}
}

func TestAddc8(t *testing.T) {
	testCases := []struct {
		a, b, r uint8 // a + b = r
		fb, fa  uint8 // flags before and after
	}{
		{a: 0x00, b: 0x00, r: 0x00, fb: 0x00, fa: 0x40}, {a: 0x00, b: 0x01, r: 0x01, fb: 0x00, fa: 0x00},
		{a: 0x00, b: 0x7f, r: 0x7f, fb: 0x00, fa: 0x00}, {a: 0x00, b: 0x80, r: 0x80, fb: 0x00, fa: 0x80},
		{a: 0x00, b: 0x81, r: 0x81, fb: 0x00, fa: 0x80}, {a: 0x00, b: 0xff, r: 0xff, fb: 0x00, fa: 0x80},
		{a: 0x01, b: 0x00, r: 0x01, fb: 0x00, fa: 0x00}, {a: 0x01, b: 0x01, r: 0x02, fb: 0x00, fa: 0x00},
		{a: 0x01, b: 0x7f, r: 0x80, fb: 0x00, fa: 0x94}, {a: 0x01, b: 0x80, r: 0x81, fb: 0x00, fa: 0x80},
		{a: 0x01, b: 0x81, r: 0x82, fb: 0x00, fa: 0x80}, {a: 0x01, b: 0xff, r: 0x00, fb: 0x00, fa: 0x51},
		{a: 0x7f, b: 0x00, r: 0x7f, fb: 0x00, fa: 0x00}, {a: 0x7f, b: 0x01, r: 0x80, fb: 0x00, fa: 0x94},
		{a: 0x7f, b: 0x7f, r: 0xfe, fb: 0x00, fa: 0x94}, {a: 0x7f, b: 0x80, r: 0xff, fb: 0x00, fa: 0x80},
		{a: 0x7f, b: 0x81, r: 0x00, fb: 0x00, fa: 0x51}, {a: 0x7f, b: 0xff, r: 0x7e, fb: 0x00, fa: 0x11},
		{a: 0x80, b: 0x00, r: 0x80, fb: 0x00, fa: 0x80}, {a: 0x80, b: 0x01, r: 0x81, fb: 0x00, fa: 0x80},
		{a: 0x80, b: 0x7f, r: 0xff, fb: 0x00, fa: 0x80}, {a: 0x80, b: 0x80, r: 0x00, fb: 0x00, fa: 0x45},
		{a: 0x80, b: 0x81, r: 0x01, fb: 0x00, fa: 0x05}, {a: 0x80, b: 0xff, r: 0x7f, fb: 0x00, fa: 0x05},
		{a: 0x81, b: 0x00, r: 0x81, fb: 0x00, fa: 0x80}, {a: 0x81, b: 0x01, r: 0x82, fb: 0x00, fa: 0x80},
		{a: 0x81, b: 0x7f, r: 0x00, fb: 0x00, fa: 0x51}, {a: 0x81, b: 0x80, r: 0x01, fb: 0x00, fa: 0x05},
		{a: 0x81, b: 0x81, r: 0x02, fb: 0x00, fa: 0x05}, {a: 0x81, b: 0xff, r: 0x80, fb: 0x00, fa: 0x91},
		{a: 0xff, b: 0x00, r: 0xff, fb: 0x00, fa: 0x80}, {a: 0xff, b: 0x01, r: 0x00, fb: 0x00, fa: 0x51},
		{a: 0xff, b: 0x7f, r: 0x7e, fb: 0x00, fa: 0x11}, {a: 0xff, b: 0x80, r: 0x7f, fb: 0x00, fa: 0x05},
		{a: 0xff, b: 0x81, r: 0x80, fb: 0x00, fa: 0x91}, {a: 0xff, b: 0xff, r: 0xfe, fb: 0x00, fa: 0x91},
		{a: 0x00, b: 0x00, r: 0x01, fb: 0x01, fa: 0x00}, {a: 0x00, b: 0x01, r: 0x02, fb: 0x01, fa: 0x00},
		{a: 0x00, b: 0x7f, r: 0x80, fb: 0x01, fa: 0x94}, {a: 0x00, b: 0x80, r: 0x81, fb: 0x01, fa: 0x80},
		{a: 0x00, b: 0x81, r: 0x82, fb: 0x01, fa: 0x80}, {a: 0x00, b: 0xff, r: 0x00, fb: 0x01, fa: 0x51},
		{a: 0x01, b: 0x00, r: 0x02, fb: 0x01, fa: 0x00}, {a: 0x01, b: 0x01, r: 0x03, fb: 0x01, fa: 0x00},
		{a: 0x01, b: 0x7f, r: 0x81, fb: 0x01, fa: 0x94}, {a: 0x01, b: 0x80, r: 0x82, fb: 0x01, fa: 0x80},
		{a: 0x01, b: 0x81, r: 0x83, fb: 0x01, fa: 0x80}, {a: 0x01, b: 0xff, r: 0x01, fb: 0x01, fa: 0x11},
		{a: 0x7f, b: 0x00, r: 0x80, fb: 0x01, fa: 0x94}, {a: 0x7f, b: 0x01, r: 0x81, fb: 0x01, fa: 0x94},
		{a: 0x7f, b: 0x7f, r: 0xff, fb: 0x01, fa: 0x94}, {a: 0x7f, b: 0x80, r: 0x00, fb: 0x01, fa: 0x51},
		{a: 0x7f, b: 0x81, r: 0x01, fb: 0x01, fa: 0x11}, {a: 0x7f, b: 0xff, r: 0x7f, fb: 0x01, fa: 0x11},
		{a: 0x80, b: 0x00, r: 0x81, fb: 0x01, fa: 0x80}, {a: 0x80, b: 0x01, r: 0x82, fb: 0x01, fa: 0x80},
		{a: 0x80, b: 0x7f, r: 0x00, fb: 0x01, fa: 0x51}, {a: 0x80, b: 0x80, r: 0x01, fb: 0x01, fa: 0x05},
		{a: 0x80, b: 0x81, r: 0x02, fb: 0x01, fa: 0x05}, {a: 0x80, b: 0xff, r: 0x80, fb: 0x01, fa: 0x91},
		{a: 0x81, b: 0x00, r: 0x82, fb: 0x01, fa: 0x80}, {a: 0x81, b: 0x01, r: 0x83, fb: 0x01, fa: 0x80},
		{a: 0x81, b: 0x7f, r: 0x01, fb: 0x01, fa: 0x11}, {a: 0x81, b: 0x80, r: 0x02, fb: 0x01, fa: 0x05},
		{a: 0x81, b: 0x81, r: 0x03, fb: 0x01, fa: 0x05}, {a: 0x81, b: 0xff, r: 0x81, fb: 0x01, fa: 0x91},
		{a: 0xff, b: 0x00, r: 0x00, fb: 0x01, fa: 0x51}, {a: 0xff, b: 0x01, r: 0x01, fb: 0x01, fa: 0x11},
		{a: 0xff, b: 0x7f, r: 0x7f, fb: 0x01, fa: 0x11}, {a: 0xff, b: 0x80, r: 0x80, fb: 0x01, fa: 0x91},
		{a: 0xff, b: 0x81, r: 0x81, fb: 0x01, fa: 0x91}, {a: 0xff, b: 0xff, r: 0xff, fb: 0x01, fa: 0x91},
	}
	for _, tC := range testCases {
		F := NewR8()
		*F = tC.fb
		res := add8(tC.a, tC.b, F, true)
		if res != tC.r {
			t.Errorf("Addc8: %#02x + %#02x = %#02x, got %#02x", tC.a, tC.b, tC.r, res)
		}
		if *F != tC.fa {
			t.Errorf("Addc8: %#02x + %#02x should give flags %#02x, got %#02x", tC.a, tC.b, tC.fa, *F)
		}
	}
}

func TestSubc8(t *testing.T) {
	testCases := []struct {
		a, b, r uint8 // a - b = r
		fb, fa  uint8 // flags before and after
	}{
		{0x00, 0x00, 0x00, 0x00, 0x42}, {0x00, 0x01, 0xff, 0x00, 0x93},
		{0x00, 0x7f, 0x81, 0x00, 0x93}, {0x00, 0x80, 0x80, 0x00, 0x87},
		{0x00, 0x81, 0x7f, 0x00, 0x13}, {0x00, 0xff, 0x01, 0x00, 0x13},
		{0x01, 0x00, 0x01, 0x00, 0x02}, {0x01, 0x01, 0x00, 0x00, 0x42},
		{0x01, 0x7f, 0x82, 0x00, 0x93}, {0x01, 0x80, 0x81, 0x00, 0x87},
		{0x01, 0x81, 0x80, 0x00, 0x87}, {0x01, 0xff, 0x02, 0x00, 0x13},
		{0x7f, 0x00, 0x7f, 0x00, 0x02}, {0x7f, 0x01, 0x7e, 0x00, 0x02},
		{0x7f, 0x7f, 0x00, 0x00, 0x42}, {0x7f, 0x80, 0xff, 0x00, 0x87},
		{0x7f, 0x81, 0xfe, 0x00, 0x87}, {0x7f, 0xff, 0x80, 0x00, 0x87},
		{0x80, 0x00, 0x80, 0x00, 0x82}, {0x80, 0x01, 0x7f, 0x00, 0x16},
		{0x80, 0x7f, 0x01, 0x00, 0x16}, {0x80, 0x80, 0x00, 0x00, 0x42},
		{0x80, 0x81, 0xff, 0x00, 0x93}, {0x80, 0xff, 0x81, 0x00, 0x93},
		{0x81, 0x00, 0x81, 0x00, 0x82}, {0x81, 0x01, 0x80, 0x00, 0x82},
		{0x81, 0x7f, 0x02, 0x00, 0x16}, {0x81, 0x80, 0x01, 0x00, 0x02},
		{0x81, 0x81, 0x00, 0x00, 0x42}, {0x81, 0xff, 0x82, 0x00, 0x93},
		{0xff, 0x00, 0xff, 0x00, 0x82}, {0xff, 0x01, 0xfe, 0x00, 0x82},
		{0xff, 0x7f, 0x80, 0x00, 0x82}, {0xff, 0x80, 0x7f, 0x00, 0x02},
		{0xff, 0x81, 0x7e, 0x00, 0x02}, {0xff, 0xff, 0x00, 0x00, 0x42},
		{0x00, 0x00, 0xff, 0x01, 0x93}, {0x00, 0x01, 0xfe, 0x01, 0x93},
		{0x00, 0x7f, 0x80, 0x01, 0x93}, {0x00, 0x80, 0x7f, 0x01, 0x13},
		{0x00, 0x81, 0x7e, 0x01, 0x13}, {0x00, 0xff, 0x00, 0x01, 0x53},
		{0x01, 0x00, 0x00, 0x01, 0x42}, {0x01, 0x01, 0xff, 0x01, 0x93},
		{0x01, 0x7f, 0x81, 0x01, 0x93}, {0x01, 0x80, 0x80, 0x01, 0x87},
		{0x01, 0x81, 0x7f, 0x01, 0x13}, {0x01, 0xff, 0x01, 0x01, 0x13},
		{0x7f, 0x00, 0x7e, 0x01, 0x02}, {0x7f, 0x01, 0x7d, 0x01, 0x02},
		{0x7f, 0x7f, 0xff, 0x01, 0x93}, {0x7f, 0x80, 0xfe, 0x01, 0x87},
		{0x7f, 0x81, 0xfd, 0x01, 0x87}, {0x7f, 0xff, 0x7f, 0x01, 0x13},
		{0x80, 0x00, 0x7f, 0x01, 0x16}, {0x80, 0x01, 0x7e, 0x01, 0x16},
		{0x80, 0x7f, 0x00, 0x01, 0x56}, {0x80, 0x80, 0xff, 0x01, 0x93},
		{0x80, 0x81, 0xfe, 0x01, 0x93}, {0x80, 0xff, 0x80, 0x01, 0x93},
		{0x81, 0x00, 0x80, 0x01, 0x82}, {0x81, 0x01, 0x7f, 0x01, 0x16},
		{0x81, 0x7f, 0x01, 0x01, 0x16}, {0x81, 0x80, 0x00, 0x01, 0x42},
		{0x81, 0x81, 0xff, 0x01, 0x93}, {0x81, 0xff, 0x81, 0x01, 0x93},
		{0xff, 0x00, 0xfe, 0x01, 0x82}, {0xff, 0x01, 0xfd, 0x01, 0x82},
		{0xff, 0x7f, 0x7f, 0x01, 0x16}, {0xff, 0x80, 0x7e, 0x01, 0x02},
		{0xff, 0x81, 0x7d, 0x01, 0x02}, {0xff, 0xff, 0xff, 0x01, 0x93},
	}
	for _, tC := range testCases {
		F := NewR8()
		*F = tC.fb
		res := sub8(tC.a, tC.b, F, true)
		if res != tC.r {
			t.Errorf("Subc8: %#02x - %#02x = %#02x, got %#02x", tC.a, tC.b, tC.r, res)
		}
		if *F != tC.fa {
			t.Errorf("Subc8: %#02x - %#02x should give flags %#02x, got %#02x", tC.a, tC.b, tC.fa, *F)
		}
	}
}

/*
func TestTest(t *testing.T) {

	testVals := []uint8{
		0,
		1,
		0x7F,
		0x80,
		0x81,
		0xFF,
	}

	for _, a := range testVals {
		for _, b := range testVals {
			F := NewR8()

			fb := *F

			// carryIn := (*F & FlagC) >> FlagCshift
			res := sub8(a, b, F, true)
			t.Logf("{%#02x, %#02x, %#02x, %#02x, %#02x},", a, b, res, fb, *F)
			// t.Logf("%3v(%4v) - %3v(%4v) - %v = %3v(%4v) CY=%v OV=%v \n", a, int8(a), b, int8(b), carryIn, res, int8(res), (*F&FlagC)>>FlagCshift, (*F&FlagV)>>FlagVshift)
		}
	}
	for _, a := range testVals {
		for _, b := range testVals {
			F := NewR8()
			*F |= FlagC

			fb := *F

			// carryIn := (*F & FlagC) >> FlagCshift
			res := sub8(a, b, F, true)

			t.Logf("{%#02x, %#02x, %#02x, %#02x, %#02x},", a, b, res, fb, *F)

			// t.Logf("%3v(%4v) - %3v(%4v) - %v = %3v(%4v) CY=%v OV=%v \n", a, int8(a), b, int8(b), carryIn, res, int8(res), (*F&FlagC)>>FlagCshift, (*F&FlagV)>>FlagVshift)
		}
	}

}
*/
